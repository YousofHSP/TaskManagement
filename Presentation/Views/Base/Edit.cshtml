@using System.Reflection
@using Presentation.Attributes
@model DTO.IBaseDto

@{
    var model = ViewBag.Model;
    var options = ViewBag.Model.Options as  Dictionary<string, List<SelectListItem>>;
    var properties = model.Properties as PropertyInfo[];
    ViewData["Title"] = "ویرایش " + model.Title;
}
<div class="card">
    <div class="card-body">
        @if (model.Error)
        {
            <div class="alert alert-danger">
                @Html.ValidationSummary()
            </div>
        }
        <form asp-action="Edit" method="post">
            @{
                var modelId = Model.GetType().GetProperty("Id")?.GetValue(Model)?.ToString() ?? "";
            }
            <input type="hidden" name="Id" value="@modelId">
            <div class="row">

                @foreach (var property in properties)
                {
                    var field = property.GetCustomAttribute<FieldAttribute>();
                    if(field is null)
                        continue;
                    field.SetLabelFromProperty(property);
                    if (field.Value == "")
                    {
                        field.Value = Model.GetType().GetProperty(property.Name)?.GetValue(Model)?.ToString() ?? "";
                    }

                    <div class="col-md-6">
                        <div class="@(field.Type == FieldType.Checkbox ? "form-check" : "form-group")">
                            <label class="@(field.Type == FieldType.Checkbox ? "from-check-label" : "form-label")"
                                   for="@property.Name">@field.Label</label>
                            @switch (field.Type)
                            {
                                case FieldType.Text:
                                    <input class="form-control" type="text" name="@property.Name" value="@field.Value"/>
                                    break;
                                case FieldType.Select:
                                    <select class="form-control select2" name="@property.Name" asp-items="@options[property.Name]">
                                    </select>
                                    break;
                                case FieldType.Time:
                                    <input class="form-control" type="time" name="@property.Name" value="@field.Value"/>
                                    break;
                                case FieldType.DateTime:
                                    <input class="form-control date-picker" type="text" name="@property.Name" value="@field.Value"/>
                                    break;
                                case FieldType.MultiSelect:
                                    <select class="form-control select2" multiple name="@(property.Name)[]"
                                            asp-items="@options[property.Name]"> </select>
                                    break;
                                case FieldType.Number:
                                    <input class="form-control" type="number" name="@property.Name" value="@field.Value"/>
                                    break;
                                case FieldType.Checkbox:
                                    <input class="form-check-input" type="checkbox" name="@property.Name" value="@field.Value"/>
                                    break;
                                case FieldType.Radio:
                                    <input class="form-control" type="radio" name="@property.Name" value="@field.Value"/>
                                    break;
                                default:
                                    throw new ArgumentOutOfRangeException();
                            }
                        </div>
                    </div>
                }

                @foreach (var field in model.Fields)
                {
                    if (field.Value == "")
                    {
                        field.Value = Model.GetType().GetProperty(field.Name)?.GetValue(Model)?.ToString() ?? "";
                    }

                    var items = field.Items as IEnumerable<SelectListItem>;
                    @if (field.Type is FieldType.Select or FieldType.MultiSelect)
                    {
                        items = items!.Select(i =>
                        {
                            if (field.Value == i.Value)
                                i.Selected = true;
                            return i;
                        });
                    }

                    <div class="col-md-6">

                        <div class="@(field.Type == FieldType.Checkbox ? "form-check" : "form-group")">
                            <label class="@(field.Type == FieldType.Checkbox ? "from-check-label" : "form-label")"
                                   for="@field.Name">@field.Label</label>

                            @switch (field.Type)
                            {
                                case FieldType.Text:
                                    <input class="form-control" name="@field.Name" value="@field.Value"/>
                                    break;
                                case FieldType.Select:
                                    <select class="form-control select2" name="@field.Name" asp-items="@items"></select>
                                    break;
                                case FieldType.MultiSelect:
                                    <select class="form-control select2" name="@(field.Name)[]" multiple asp-items="@items"></select>
                                    break;
                                case FieldType.Time:
                                    <input class="form-control" type="time" name="@field.Name" value="@field.Value"/>
                                    break;
                                case FieldType.DateTime:
                                    <input class="form-control date-picker" type="text" name="@field.Name"
                                           value="@field.Value"/>
                                    break;
                                case FieldType.Number:
                                    <input class="form-control" type="number" name="@field.Name" value="@field.Value"/>
                                    break;
                                case FieldType.Checkbox:
                                    <input class="form-check-input" type="checkbox" name="@field.Name"
                                           value="@field.Value"/>
                                    break;
                                case FieldType.Radio:
                                    <input class="form-control" type="radio" name="@field.Name" value="@field.Value"/>
                                    break;
                                default:
                                    throw new ArgumentOutOfRangeException();
                            }
                        </div>
                    </div>
                }
            </div>
            <button type="submit" class="btn btn-primary">ثبت</button>
        </form>
    </div>
</div>
